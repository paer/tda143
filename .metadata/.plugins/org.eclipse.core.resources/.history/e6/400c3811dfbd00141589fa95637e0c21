package gameOfLife;

import java.util.Random;

public class LifeModel {
	private int width, height, nrOfGeneration;
	private boolean[][] world;

	public LifeModel(int width, int height) {
		this.width = width;
		this.height = height;
		this.world = new boolean[width][height];
	}// konstruktor

	public int getWidth() {
		System.out.println("LifeModel: Call to getWidth()");
		return width;
	}// getWidth

	public int getHeight() {
		System.out.println("LifeModel: Call to getHeight()");
		return height;
	}// getHeight

	public int getNrOfGeneration() {
		System.out.println("LifeModel: Call to nrOfGeneration()");
		return nrOfGeneration;
	}// getNrOfGeneration

	public void randomPopulation(double fill) {
		System.out.println("LifeModel: Call to randomPopulation(" + fill + ")");
		Random rn = new Random();
		for (int i = 0; i < world.length; i++) {
			for (int j = 0; j < world[i].length; j++)
				world[i][j] = fill <= rn.nextDouble();
		}
	}// randomPopulation

	public void newGeneration() {
		System.out.println("LifeModel: Call to newGeneration()");
		for (int i = 0; i < world.length; i++) {
			for (int j = 0; j < world[i].length; j++) {
				if (world[i][j]) {

				} else {

				}
			}
		}
	}// newGeneration

	private int nrOfNeighbors(int i, int j) {
		int neighbours = 0;
		for (int m = -1; m <= 1; m++) {
			for (int n = -1; n <= 1; n++) {
				neighbours += cellToInt(i, j);
			}
		}
		return neighbours;
	}

	private int cellToInt(int i, int j) {
		return getCell(i, j) ? 1 : 0;
	}

	public void invertCell(int i, int j) {
		System.out
				.println("LifeModel: Call to invertCell(" + i + "," + j + ")");
		world[i][j] = !world[i][j];
	}// invertCell

	public boolean getCell(int i, int j) {
		System.out.println("LifeModel: Call to getCell(" + i + "," + j + ")");
		if (i < 0 || j < 0 || i > world.length - 1 || j > world[i].length - 1)
			return false;

		return world[i][j];
	}// getCell
} // LifeModel
